{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Reyna\\\\Documents\\\\GitHub\\\\SWEN90013\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Reyna\\\\Documents\\\\GitHub\\\\SWEN90013\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\Reyna\\\\Documents\\\\GitHub\\\\SWEN90013\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Reyna\\\\Documents\\\\GitHub\\\\SWEN90013\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Reyna\\\\Documents\\\\GitHub\\\\SWEN90013\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Reyna\\\\Documents\\\\GitHub\\\\SWEN90013\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Reyna\\\\Documents\\\\GitHub\\\\SWEN90013\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\Reyna\\\\Documents\\\\GitHub\\\\SWEN90013\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\Reyna\\\\Documents\\\\GitHub\\\\SWEN90013\\\\src\\\\components\\\\dashboard\\\\Projects\\\\AllProjects\\\\Projects.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Paper from \"@material-ui/core/Paper\";\nimport grey from \"@material-ui/core/colors/grey\";\nimport List from \"@material-ui/core/List\";\nimport ProjectCard from \"./ProjectCard\";\nimport store from \"../../../../store\";\nimport { getAllSubjects, getProjectList, getSupervisors } from \"../../../../api\";\nimport { getAllProjectAction, getSupervisorsAction, getAllSubjectsAction } from \"../../../../store/actionCreators\";\nimport { projectStatus } from \"../Constants/Constants\";\nvar styles = {\n  paper: {\n    padding: 10,\n    margin: 10,\n    backgroundColor: grey[50]\n  },\n  swimTitle: {\n    textAlign: \"center\",\n    paddingLeft: \"3%\",\n    paddingBottom: \"3%\",\n    fontWeight: \"bold\",\n    color: \"#094183\"\n  }\n};\nvar myIDs = {\n  supervisorID: \"supervisor 1 me\",\n  coordinatorID: \"coordinator 1 me\"\n};\n\nvar ViewProjects =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ViewProjects, _React$Component);\n\n  function ViewProjects(props) {\n    var _this;\n\n    _classCallCheck(this, ViewProjects);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ViewProjects).call(this, props));\n\n    _this._filterProjectsByStatus = function (status) {\n      // TODO: Filter by user\n      var projects = _this.state.projects;\n      var targetProjects = [];\n      projects.forEach(function (p) {\n        // First check if valid before sending through\n        // May not need this when back-end is fixed\n        if ('proposal' in p) {\n          if ('client' in p.proposal) {\n            if ('organisation' in p.proposal.client) {\n              if (p.status === status) {\n                targetProjects.push(p);\n              }\n            }\n          }\n        }\n      });\n      return targetProjects;\n    };\n\n    _this._filterProjectsForUser = function () {\n      var projects = _this.state.projects;\n      var targetProjects = [];\n      projects.forEach(function (project) {\n        if (project.supervisorID === myIDs.supervisorID || project.coordinatorID === myIDs.coordinatorID) {\n          targetProjects.push(project);\n        }\n      });\n      return targetProjects;\n    };\n\n    _this.state = store.getState();\n    _this._handleStoreChange = _this._handleStoreChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    store.subscribe(_this._handleStoreChange);\n    return _this;\n  }\n\n  _createClass(ViewProjects, [{\n    key: \"_handleStoreChange\",\n    value: function _handleStoreChange() {\n      this.setState(store.getState());\n    }\n  }, {\n    key: \"_reqTodoList\",\n    value: function () {\n      var _reqTodoList2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var projects, getAllProjectAct, supervisors, getSupervisorsAct, subjects, getAllSubjectsAct;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return getProjectList();\n\n              case 2:\n                projects = _context.sent;\n                getAllProjectAct = getAllProjectAction(projects);\n                store.dispatch(getAllProjectAct);\n                _context.next = 7;\n                return getSupervisors();\n\n              case 7:\n                supervisors = _context.sent;\n                getSupervisorsAct = getSupervisorsAction(supervisors);\n                store.dispatch(getSupervisorsAct);\n                _context.next = 12;\n                return getAllSubjects();\n\n              case 12:\n                subjects = _context.sent;\n                getAllSubjectsAct = getAllSubjectsAction(subjects);\n                store.dispatch(getAllSubjectsAct);\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function _reqTodoList() {\n        return _reqTodoList2.apply(this, arguments);\n      }\n\n      return _reqTodoList;\n    }()\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._reqTodoList();\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      console.log(nextProps.currentPage);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var classes = this.props.classes;\n      var _this$state = this.state,\n          supervisors = _this$state.supervisors,\n          subjects = _this$state.subjects;\n      return React.createElement(\"div\", {\n        style: {\n          position: \"relative\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        container: true,\n        justify: \"flex-end\",\n        direction: \"row\",\n        alignContent: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        item: true,\n        sm: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(Paper, {\n        className: classes.paper,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        variant: \"h5\",\n        className: classes.swimTitle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, \"New\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(List, {\n        dense: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, this._filterProjectsByStatus(projectStatus.new).map(function (project, index) {\n        return React.createElement(ProjectCard, {\n          _id: project._id,\n          key: index,\n          project: project,\n          supervisors: supervisors,\n          subjects: subjects,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128\n          },\n          __self: this\n        });\n      }))))), React.createElement(Grid, {\n        item: true,\n        sm: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, React.createElement(Paper, {\n        className: classes.paper,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        variant: \"h5\",\n        className: classes.swimTitle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, \"In Progress\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(List, {\n        dense: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, this._filterProjectsByStatus(projectStatus.inProgress).map(function (project, index) {\n        return React.createElement(ProjectCard, {\n          _id: project._id,\n          key: index,\n          project: project,\n          supervisors: supervisors,\n          subjects: subjects,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151\n          },\n          __self: this\n        });\n      }))))), React.createElement(Grid, {\n        item: true,\n        sm: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, React.createElement(Paper, {\n        className: classes.paper,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        variant: \"h5\",\n        className: classes.swimTitle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, \"Completed\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, React.createElement(List, {\n        dense: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, this._filterProjectsByStatus(projectStatus.completed).map(function (project, index) {\n        return React.createElement(ProjectCard, {\n          _id: project._id,\n          key: index,\n          project: project,\n          supervisors: supervisors,\n          subjects: subjects,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 174\n          },\n          __self: this\n        });\n      })))))), React.createElement(Link, {\n        to: \"/dashboard/allProposals\",\n        className: classes.link,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"contained\",\n        size: \"medium\",\n        className: classes.rejectedButton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, \"View All Proposals\")));\n    }\n  }]);\n\n  return ViewProjects;\n}(React.Component);\n\nViewProjects.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(ViewProjects);","map":{"version":3,"sources":["C:\\Users\\Reyna\\Documents\\GitHub\\SWEN90013\\src\\components\\dashboard\\Projects\\AllProjects\\Projects.js"],"names":["React","PropTypes","withStyles","Grid","Typography","Paper","grey","List","ProjectCard","store","getAllSubjects","getProjectList","getSupervisors","getAllProjectAction","getSupervisorsAction","getAllSubjectsAction","projectStatus","styles","paper","padding","margin","backgroundColor","swimTitle","textAlign","paddingLeft","paddingBottom","fontWeight","color","myIDs","supervisorID","coordinatorID","ViewProjects","props","_filterProjectsByStatus","status","projects","state","targetProjects","forEach","p","proposal","client","push","_filterProjectsForUser","project","getState","_handleStoreChange","bind","subscribe","setState","getAllProjectAct","dispatch","supervisors","getSupervisorsAct","subjects","getAllSubjectsAct","_reqTodoList","nextProps","console","log","currentPage","classes","position","new","map","index","_id","inProgress","completed","link","rejectedButton","Component","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {withStyles} from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport grey from \"@material-ui/core/colors/grey\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ProjectCard from \"./ProjectCard\";\r\nimport store from \"../../../../store\";\r\nimport {getAllSubjects, getProjectList, getSupervisors} from \"../../../../api\";\r\nimport {\r\n    getAllProjectAction,\r\n    getSupervisorsAction,\r\n    getAllSubjectsAction\r\n} from \"../../../../store/actionCreators\";\r\nimport {projectStatus} from \"../Constants/Constants\";\r\n\r\nconst styles = {\r\n    paper: {\r\n        padding: 10,\r\n        margin: 10,\r\n        backgroundColor: grey[50],\r\n    },\r\n    swimTitle: {\r\n        textAlign: \"center\",\r\n        paddingLeft: \"3%\",\r\n        paddingBottom: \"3%\",\r\n        fontWeight: \"bold\",\r\n        color: \"#094183\"\r\n    }\r\n};\r\n\r\nconst myIDs = {\r\n    supervisorID: \"supervisor 1 me\",\r\n    coordinatorID: \"coordinator 1 me\"\r\n};\r\n\r\nclass ViewProjects extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = store.getState();\r\n\r\n        this._handleStoreChange = this._handleStoreChange.bind(this);\r\n        store.subscribe(this._handleStoreChange);\r\n    }\r\n\r\n    _handleStoreChange() {\r\n        this.setState(store.getState());\r\n    }\r\n\r\n    async _reqTodoList() {\r\n        const projects = await getProjectList();\r\n        const getAllProjectAct = getAllProjectAction(projects);\r\n        store.dispatch(getAllProjectAct);\r\n\r\n        const supervisors = await getSupervisors();\r\n        const getSupervisorsAct = getSupervisorsAction(supervisors);\r\n        store.dispatch(getSupervisorsAct);\r\n\r\n        const subjects = await getAllSubjects();\r\n        const getAllSubjectsAct = getAllSubjectsAction(subjects);\r\n        store.dispatch(getAllSubjectsAct);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._reqTodoList();\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        console.log(nextProps.currentPage);\r\n    }\r\n\r\n    _filterProjectsByStatus = status => {\r\n        // TODO: Filter by user\r\n        const {projects} = this.state;\r\n        let targetProjects = [];\r\n\r\n        projects.forEach(p => {\r\n            // First check if valid before sending through\r\n            // May not need this when back-end is fixed\r\n            if ('proposal' in p) {\r\n                if ('client' in p.proposal) {\r\n                    if ('organisation' in p.proposal.client) {\r\n                        if (p.status === status) {\r\n                            targetProjects.push(p);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return targetProjects;\r\n    };\r\n\r\n    _filterProjectsForUser = () => {\r\n        const {projects} = this.state;\r\n        let targetProjects = [];\r\n\r\n        projects.forEach(project => {\r\n            if (\r\n                project.supervisorID === myIDs.supervisorID ||\r\n                project.coordinatorID === myIDs.coordinatorID\r\n            ) {\r\n                targetProjects.push(project);\r\n            }\r\n        });\r\n        return targetProjects;\r\n    };\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n        const {supervisors, subjects} = this.state;\r\n\r\n        return (\r\n            <div style={{position: \"relative\"}}>\r\n                <Grid container justify=\"flex-end\" direction=\"row\"\r\n                    alignContent=\"center\">\r\n                    <Grid item sm>\r\n                        <Paper className={classes.paper}>\r\n                            <Typography variant=\"h5\" className={classes.swimTitle}>\r\n                                New\r\n                            </Typography>\r\n                            <div>\r\n                                <List dense={true}>\r\n                                    {this._filterProjectsByStatus(projectStatus.new).map(\r\n                                        (project, index) => (\r\n                                            <ProjectCard\r\n                                                _id={project._id}\r\n                                                key={index}\r\n                                                project={project}\r\n                                                supervisors={supervisors}\r\n                                                subjects={subjects}\r\n                                            />\r\n                                        )\r\n                                    )}\r\n                                </List>\r\n                            </div>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item sm>\r\n                        <Paper className={classes.paper}>\r\n                            <Typography variant=\"h5\" className={classes.swimTitle}>\r\n                                In Progress\r\n                            </Typography>\r\n                            <div>\r\n                                <List dense={true}>\r\n                                    {\r\n                                        this._filterProjectsByStatus(projectStatus.inProgress).map(\r\n                                            (project, index) => (\r\n                                                <ProjectCard\r\n                                                    _id={project._id}\r\n                                                    key={index}\r\n                                                    project={project}\r\n                                                    supervisors={supervisors}\r\n                                                    subjects={subjects}\r\n                                                />\r\n                                            )\r\n                                        )\r\n                                    }\r\n                                </List>\r\n                            </div>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item sm>\r\n                        <Paper className={classes.paper}>\r\n                            <Typography variant=\"h5\" className={classes.swimTitle}>\r\n                                Completed\r\n                            </Typography>\r\n                            <div>\r\n                                <List dense={true}>\r\n                                    {this._filterProjectsByStatus(projectStatus.completed).map(\r\n                                        (project, index) => (\r\n                                            <ProjectCard\r\n                                                _id={project._id}\r\n                                                key={index}\r\n                                                project={project}\r\n                                                supervisors={supervisors}\r\n                                                subjects={subjects}\r\n                                            />\r\n                                        )\r\n                                    )}\r\n                                </List>\r\n                            </div>\r\n                        </Paper>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Link to={`/dashboard/allProposals`}\r\n                    className={classes.link}>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        size=\"medium\"\r\n                        className={classes.rejectedButton}\r\n                    >\r\n                        View All Proposals\r\n                    </Button>\r\n                </Link>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nViewProjects.propTypes = {\r\n    classes: PropTypes.object.isRequired\r\n};\r\n\r\nexport default withStyles(styles)(ViewProjects);\r\n"]},"metadata":{},"sourceType":"module"}