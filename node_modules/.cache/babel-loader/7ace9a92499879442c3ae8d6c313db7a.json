{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Reyna\\\\Documents\\\\GitHub\\\\SWEN90013\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Reyna\\\\Documents\\\\GitHub\\\\SWEN90013\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\Reyna\\\\Documents\\\\GitHub\\\\SWEN90013\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Reyna\\\\Documents\\\\GitHub\\\\SWEN90013\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Reyna\\\\Documents\\\\GitHub\\\\SWEN90013\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Reyna\\\\Documents\\\\GitHub\\\\SWEN90013\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Reyna\\\\Documents\\\\GitHub\\\\SWEN90013\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\Reyna\\\\Documents\\\\GitHub\\\\SWEN90013\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\Reyna\\\\Documents\\\\GitHub\\\\SWEN90013\\\\src\\\\components\\\\dashboard\\\\Proposals\\\\AllProposals\\\\RejectedProposals.js\";\n\n/**\r\n * This component contains all reject proposals. It is entered via a \"View Rejected Proposals\" button on the Proposals page.\r\n * Author: Reyna Tan\r\n * Date: 07/05/2019\r\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles, useTheme } from '@material-ui/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport { withStyles } from \"@material-ui/core/styles\";\nimport TableHead from \"@material-ui/core/TableHead/TableHead\";\nimport store from \"../../../../store\";\nimport { getProposalList, getAllSubjects } from \"../../../../api\";\nimport { getAllProposalsAction, getAllSubjectsAction } from \"../../../../store/actionCreators\";\nimport MaterialTable from 'material-table';\n\nvar RejectedProposals =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(RejectedProposals, _React$Component);\n\n  function RejectedProposals(props) {\n    var _this;\n\n    _classCallCheck(this, RejectedProposals);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RejectedProposals).call(this, props));\n\n    _this._filterProposalsByStatus = function (status) {\n      //TODO: filter by user\n      var proposals = _this.state.proposals;\n      var targetProposals = [];\n      proposals.forEach(function (p) {\n        // First check if valid before sending through\n        if ('client' in p) {\n          if ('organisation' in p.client) {\n            if (p.status === status) {\n              targetProposals.push(p);\n            }\n          }\n        }\n      });\n      return targetProposals;\n    };\n\n    _this.state = store.getState();\n    _this._handleStoreChange = _this._handleStoreChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    store.subscribe(_this._handleStoreChange);\n    return _this;\n  }\n\n  _createClass(RejectedProposals, [{\n    key: \"_handleStoreChange\",\n    value: function _handleStoreChange() {\n      this.setState(store.getState());\n    }\n  }, {\n    key: \"_reqTodoList\",\n    value: function () {\n      var _reqTodoList2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var proposals, getAllProposalsAct, subjects, getAllSubjectsAct;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return getProposalList();\n\n              case 2:\n                proposals = _context.sent;\n                getAllProposalsAct = getAllProposalsAction(proposals);\n                store.dispatch(getAllProposalsAct);\n                _context.next = 7;\n                return getAllSubjects();\n\n              case 7:\n                subjects = _context.sent;\n                getAllSubjectsAct = getAllSubjectsAction(subjects);\n                store.dispatch(getAllSubjectsAct);\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function _reqTodoList() {\n        return _reqTodoList2.apply(this, arguments);\n      }\n\n      return _reqTodoList;\n    }()\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._reqTodoList();\n    }\n  }, {\n    key: \"_capitalize\",\n    value: function _capitalize(str) {\n      if (str === \"new\") {\n        return \"New\";\n      } else if (str === \"approved\") {\n        return \"Approved\";\n      } else {\n        return \"Rejected\";\n      }\n    }\n  }, {\n    key: \"_extractYear\",\n    value: function _extractYear(str) {\n      // Format in which the date is stored in the DB: 2019-10-07T03:34:16.921Z\n      // Slice the string using \"-\" and extract only the first element\n      return str.split(\"-\")[0];\n    }\n  }, {\n    key: \"_formatDataIntoTableList\",\n    value: function _formatDataIntoTableList() {\n      var _this2 = this;\n\n      var proposals = this.state.proposals;\n      var proposalList = [];\n      proposals.forEach(function (p) {\n        var nextProposal = {\n          name: p.name,\n          client: p.client.firstName + \" \" + p.client.lastName,\n          outlineOfProject: p.outlineOfProject,\n          status: _this2._capitalize(p.status),\n          year: _this2._extractYear(p.date)\n        };\n        proposalList.push(nextProposal);\n      });\n      return proposalList;\n    } // Dynamically obtain lookup values for the year value in all proposals' dateCreated\n\n  }, {\n    key: \"_getYearLookupValues\",\n    value: function _getYearLookupValues() {\n      var _this3 = this;\n\n      var proposals = this.state.proposals;\n      var yearList = {};\n      proposals.forEach(function (p) {\n        var nextYear = _this3._extractYear(p.date);\n\n        if (nextYear in yearList) {\n          yearList[nextYear] = nextYear.toString();\n        }\n      });\n      console.log(yearList);\n      return yearList;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(MaterialTable, {\n        title: \"All Proposals\",\n        columns: [{\n          title: 'Proposal Name',\n          field: 'name'\n        }, {\n          title: 'Client',\n          field: 'client'\n        }, {\n          title: 'Description',\n          field: 'outlineOfProject',\n          filtering: false\n        }, {\n          title: 'Status',\n          field: 'status',\n          lookup: {\n            New: 'New',\n            Approved: 'Approved',\n            Rejected: 'Rejected'\n          }\n        }, {\n          title: 'Year',\n          field: 'year',\n          filterCellStyle: {\n            maxWidth: 50\n          },\n          lookup: this._getYearLookupValues()\n        }],\n        data: this._formatDataIntoTableList(),\n        options: {\n          filtering: true\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return RejectedProposals;\n}(React.Component);\n\nexport default RejectedProposals;","map":{"version":3,"sources":["C:\\Users\\Reyna\\Documents\\GitHub\\SWEN90013\\src\\components\\dashboard\\Proposals\\AllProposals\\RejectedProposals.js"],"names":["React","PropTypes","makeStyles","useTheme","Table","TableBody","TableCell","TableRow","Paper","IconButton","FirstPageIcon","KeyboardArrowLeft","KeyboardArrowRight","LastPageIcon","withStyles","TableHead","store","getProposalList","getAllSubjects","getAllProposalsAction","getAllSubjectsAction","MaterialTable","RejectedProposals","props","_filterProposalsByStatus","status","proposals","state","targetProposals","forEach","p","client","push","getState","_handleStoreChange","bind","subscribe","setState","getAllProposalsAct","dispatch","subjects","getAllSubjectsAct","_reqTodoList","str","split","proposalList","nextProposal","name","firstName","lastName","outlineOfProject","_capitalize","year","_extractYear","date","yearList","nextYear","toString","console","log","title","field","filtering","lookup","New","Approved","Rejected","filterCellStyle","maxWidth","_getYearLookupValues","_formatDataIntoTableList","Component"],"mappings":"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","sourcesContent":["/**\r\n * This component contains all reject proposals. It is entered via a \"View Rejected Proposals\" button on the Proposals page.\r\n * Author: Reyna Tan\r\n * Date: 07/05/2019\r\n */\r\n\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {makeStyles, useTheme} from '@material-ui/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\nimport {withStyles} from \"@material-ui/core/styles\";\r\nimport TableHead from \"@material-ui/core/TableHead/TableHead\";\r\nimport store from \"../../../../store\";\r\nimport {getProposalList, getAllSubjects} from \"../../../../api\";\r\nimport {getAllProposalsAction, getAllSubjectsAction} from \"../../../../store/actionCreators\";\r\nimport MaterialTable from 'material-table';\r\n\r\nclass RejectedProposals extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = store.getState();\r\n\r\n        this._handleStoreChange = this._handleStoreChange.bind(this);\r\n        store.subscribe(this._handleStoreChange);\r\n    }\r\n\r\n    _handleStoreChange() {\r\n        this.setState(store.getState());\r\n    }\r\n\r\n    async _reqTodoList() {\r\n        const proposals = await getProposalList();\r\n        const getAllProposalsAct = getAllProposalsAction(proposals);\r\n        store.dispatch(getAllProposalsAct);\r\n\r\n        const subjects = await getAllSubjects();\r\n        const getAllSubjectsAct = getAllSubjectsAction(subjects);\r\n        store.dispatch(getAllSubjectsAct);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._reqTodoList();\r\n    }\r\n\r\n    _filterProposalsByStatus = status => {\r\n        //TODO: filter by user\r\n        const {proposals} = this.state;\r\n        let targetProposals = [];\r\n\r\n        proposals.forEach(p => {\r\n            // First check if valid before sending through\r\n            if ('client' in p) {\r\n                if ('organisation' in p.client) {\r\n                    if (p.status === status) {\r\n                        targetProposals.push(p);\r\n                    }\r\n                }\r\n            }\r\n\r\n        });\r\n\r\n        return targetProposals;\r\n    };\r\n\r\n    _capitalize(str) {\r\n        if (str === \"new\") {\r\n            return \"New\";\r\n        } else if (str === \"approved\") {\r\n            return \"Approved\";\r\n        } else {\r\n            return \"Rejected\";\r\n        }\r\n    };\r\n\r\n    _extractYear(str) {\r\n        // Format in which the date is stored in the DB: 2019-10-07T03:34:16.921Z\r\n        // Slice the string using \"-\" and extract only the first element\r\n        return str.split(\"-\")[0];\r\n    }\r\n\r\n    _formatDataIntoTableList() {\r\n        const {proposals} = this.state;\r\n\r\n        let proposalList = [];\r\n\r\n        proposals.forEach(p => {\r\n            let nextProposal = {\r\n                name: p.name,\r\n                client: p.client.firstName + \" \" + p.client.lastName,\r\n                outlineOfProject: p.outlineOfProject,\r\n                status: this._capitalize(p.status),\r\n                year: this._extractYear(p.date)\r\n            }\r\n\r\n            proposalList.push(nextProposal);\r\n        })\r\n\r\n        return proposalList;\r\n    }\r\n\r\n    // Dynamically obtain lookup values for the year value in all proposals' dateCreated\r\n    _getYearLookupValues() {\r\n        const {proposals} = this.state;\r\n\r\n        var yearList = {};\r\n\r\n        proposals.forEach(p => {\r\n            let nextYear = this._extractYear(p.date);\r\n\r\n            if( nextYear in yearList) {\r\n                yearList[nextYear] = nextYear.toString();\r\n            }\r\n        })\r\n\r\n        console.log(yearList);\r\n        return yearList;\r\n    }\r\n\r\n    render() {\r\n        \r\n        return (\r\n            <MaterialTable\r\n                title=\"All Proposals\"\r\n                columns={[\r\n                    { title: 'Proposal Name', field: 'name' },\r\n                    { title: 'Client', field: 'client' },\r\n                    { title: 'Description', field: 'outlineOfProject', filtering: false },\r\n                    { title: 'Status', field: 'status', lookup: { New: 'New', Approved: 'Approved', Rejected: 'Rejected'} },\r\n                    { title: 'Year', field: 'year', filterCellStyle:{maxWidth:50}, lookup: this._getYearLookupValues() },\r\n                ]}\r\n                data={this._formatDataIntoTableList()}\r\n                options={{\r\n                    filtering: true\r\n                }}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default (RejectedProposals);"]},"metadata":{},"sourceType":"module"}