{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Reyna\\\\Documents\\\\GitHub\\\\SWEN90013\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Reyna\\\\Documents\\\\GitHub\\\\SWEN90013\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\Reyna\\\\Documents\\\\GitHub\\\\SWEN90013\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Reyna\\\\Documents\\\\GitHub\\\\SWEN90013\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Reyna\\\\Documents\\\\GitHub\\\\SWEN90013\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Reyna\\\\Documents\\\\GitHub\\\\SWEN90013\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Reyna\\\\Documents\\\\GitHub\\\\SWEN90013\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\Reyna\\\\Documents\\\\GitHub\\\\SWEN90013\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\Reyna\\\\Documents\\\\GitHub\\\\SWEN90013\\\\src\\\\components\\\\dashboard\\\\Projects\\\\AllProjects\\\\AllProjects.js\";\n\n/**\r\n * This component contains all proposals. It is entered via a \"View All Proposals\" button on the Proposals page.\r\n * Author: Reyna Tan\r\n * Date: 07/05/2019\r\n */\nimport React from 'react';\nimport store from \"../../../../store\";\nimport { getAllSubjects, getProjectList, getSupervisors } from \"../../../../api\";\nimport { getAllProjectAction, getSupervisorsAction, getAllSubjectsAction } from \"../../../../store/actionCreators\";\nimport MaterialTable from 'material-table';\n\nvar AllProjects =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AllProjects, _React$Component);\n\n  function AllProjects(props) {\n    var _this;\n\n    _classCallCheck(this, AllProjects);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AllProjects).call(this, props));\n\n    _this._showSupervisorName = function (supervisorId) {\n      var supervisors = _this.state.supervisors;\n      var supervisorName = \" \";\n      supervisors.forEach(function (sp) {\n        if (sp._id === supervisorId) {\n          supervisorName = sp.firstName + \" \" + sp.lastName;\n        }\n      });\n      return supervisorName;\n    };\n\n    _this.state = store.getState();\n    _this._handleStoreChange = _this._handleStoreChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    store.subscribe(_this._handleStoreChange);\n    return _this;\n  }\n\n  _createClass(AllProjects, [{\n    key: \"_handleStoreChange\",\n    value: function _handleStoreChange() {\n      this.setState(store.getState());\n    }\n  }, {\n    key: \"_reqTodoList\",\n    value: function () {\n      var _reqTodoList2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var projects, getAllProjectAct, supervisors, getSupervisorsAct, subjects, getAllSubjectsAct;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return getProjectList();\n\n              case 2:\n                projects = _context.sent;\n                getAllProjectAct = getAllProjectAction(projects);\n                store.dispatch(getAllProjectAct);\n                _context.next = 7;\n                return getSupervisors();\n\n              case 7:\n                supervisors = _context.sent;\n                getSupervisorsAct = getSupervisorsAction(supervisors);\n                store.dispatch(getSupervisorsAct);\n                _context.next = 12;\n                return getAllSubjects();\n\n              case 12:\n                subjects = _context.sent;\n                getAllSubjectsAct = getAllSubjectsAction(subjects);\n                store.dispatch(getAllSubjectsAct);\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function _reqTodoList() {\n        return _reqTodoList2.apply(this, arguments);\n      }\n\n      return _reqTodoList;\n    }()\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._reqTodoList();\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      console.log(nextProps.currentPage);\n    }\n  }, {\n    key: \"_extractYear\",\n    value: function _extractYear(str) {\n      // Format in which the date is stored in the DB: 2019-10-07T03:34:16.921Z\n      // Slice the string using \"-\" and extract only the first element\n      return str.split(\"-\")[0];\n    }\n  }, {\n    key: \"_formatDataIntoTableList\",\n    value: function _formatDataIntoTableList() {\n      var projects = this.state.projects;\n      var projectList = [];\n      projects.forEach(function (p) {\n        // First check if valid\n        if ('proposal' in p) {\n          if ('client' in p.proposal) {\n            if ('organisation' in p.proposal.client) {\n              var nextProject = {\n                // year: this._extractYear(p.date),\n                name: p.name,\n                client: p.proposal.client.firstName + \" \" + p.proposal.client.lastName,\n                outlineOfProject: p.proposal.outlineOfProject,\n                status: p.status,\n                subjectId: p.subjectId,\n                supervisor: p.supervisorId\n              };\n              projectList.push(nextProject);\n            }\n          }\n        }\n      });\n      return projectList;\n    }\n  }, {\n    key: \"_getSubjectFilterLookup\",\n    value: function _getSubjectFilterLookup() {\n      var subjects = this.state.subjects;\n      var subjectList = {};\n      return subjectList;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(MaterialTable, {\n        title: \"All Projects\",\n        columns: [// { title: 'Year', field: 'year', filterCellStyle:{maxWidth:50} },\n        {\n          title: 'Proposal Name',\n          field: 'name'\n        }, {\n          title: 'Client',\n          field: 'client'\n        }, {\n          title: 'Description',\n          field: 'outlineOfProject',\n          filtering: false\n        }, {\n          title: 'Status',\n          field: 'status',\n          lookup: {\n            new: 'New',\n            inProgress: 'In Progress',\n            completed: 'Completed'\n          },\n          filterCellStyle: {\n            paddingTop: 0\n          }\n        }, {\n          title: 'Subject',\n          field: 'subjectId',\n          filterCellStyle: {\n            maxWidth: 50\n          }\n        }, {\n          title: 'Supervisor',\n          field: 'supervisor'\n        }],\n        data: this._formatDataIntoTableList(),\n        options: {\n          filtering: true\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return AllProjects;\n}(React.Component);\n\nexport default AllProjects;","map":{"version":3,"sources":["C:\\Users\\Reyna\\Documents\\GitHub\\SWEN90013\\src\\components\\dashboard\\Projects\\AllProjects\\AllProjects.js"],"names":["React","store","getAllSubjects","getProjectList","getSupervisors","getAllProjectAction","getSupervisorsAction","getAllSubjectsAction","MaterialTable","AllProjects","props","_showSupervisorName","supervisorId","supervisors","state","supervisorName","forEach","sp","_id","firstName","lastName","getState","_handleStoreChange","bind","subscribe","setState","projects","getAllProjectAct","dispatch","getSupervisorsAct","subjects","getAllSubjectsAct","_reqTodoList","nextProps","console","log","currentPage","str","split","projectList","p","proposal","client","nextProject","name","outlineOfProject","status","subjectId","supervisor","push","subjectList","title","field","filtering","lookup","new","inProgress","completed","filterCellStyle","paddingTop","maxWidth","_formatDataIntoTableList","Component"],"mappings":"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","sourcesContent":["/**\r\n * This component contains all proposals. It is entered via a \"View All Proposals\" button on the Proposals page.\r\n * Author: Reyna Tan\r\n * Date: 07/05/2019\r\n */\r\n\r\nimport React from 'react';\r\nimport store from \"../../../../store\";\r\nimport {getAllSubjects, getProjectList, getSupervisors} from \"../../../../api\";\r\nimport {\r\n    getAllProjectAction,\r\n    getSupervisorsAction,\r\n    getAllSubjectsAction\r\n} from \"../../../../store/actionCreators\";\r\nimport MaterialTable from 'material-table';\r\n\r\nclass AllProjects extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = store.getState();\r\n\r\n        this._handleStoreChange = this._handleStoreChange.bind(this);\r\n        store.subscribe(this._handleStoreChange);\r\n    }\r\n\r\n    _handleStoreChange() {\r\n        this.setState(store.getState());\r\n    }\r\n\r\n    async _reqTodoList() {\r\n        const projects = await getProjectList();\r\n        const getAllProjectAct = getAllProjectAction(projects);\r\n        store.dispatch(getAllProjectAct);\r\n\r\n        const supervisors = await getSupervisors();\r\n        const getSupervisorsAct = getSupervisorsAction(supervisors);\r\n        store.dispatch(getSupervisorsAct);\r\n\r\n        const subjects = await getAllSubjects();\r\n        const getAllSubjectsAct = getAllSubjectsAction(subjects);\r\n        store.dispatch(getAllSubjectsAct);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._reqTodoList();\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        console.log(nextProps.currentPage);\r\n    }\r\n\r\n    _extractYear(str) {\r\n        // Format in which the date is stored in the DB: 2019-10-07T03:34:16.921Z\r\n        // Slice the string using \"-\" and extract only the first element\r\n        return str.split(\"-\")[0];\r\n    }\r\n\r\n    _formatDataIntoTableList() {\r\n        const {projects} = this.state;\r\n\r\n        let projectList = [];\r\n\r\n        projects.forEach(p => {\r\n\r\n            // First check if valid\r\n            if ('proposal' in p) {\r\n                if ('client' in p.proposal) {\r\n                    if ('organisation' in p.proposal.client) {\r\n                        let nextProject = {\r\n                            // year: this._extractYear(p.date),\r\n                            name: p.name,\r\n                            client: p.proposal.client.firstName + \" \" + p.proposal.client.lastName,\r\n                            outlineOfProject: p.proposal.outlineOfProject,\r\n                            status: p.status,\r\n                            subjectId: p.subjectId,\r\n                            supervisor: p.supervisorId \r\n                        }\r\n            \r\n                        projectList.push(nextProject);\r\n                    }\r\n                }\r\n            }\r\n            \r\n        })\r\n\r\n        return projectList;\r\n    }\r\n\r\n    _showSupervisorName = (supervisorId) => {\r\n        const {supervisors} = this.state;\r\n        let supervisorName = \" \";\r\n        supervisors.forEach(sp => {\r\n            if (sp._id === supervisorId) {\r\n                supervisorName = sp.firstName + \" \" + sp.lastName;\r\n            }\r\n        });\r\n        return supervisorName;\r\n    };\r\n\r\n    _getSubjectFilterLookup() {\r\n        const {subjects} = this.state;\r\n\r\n        let subjectList = {};\r\n\r\n        return subjectList;\r\n    }\r\n\r\n    render() {\r\n        \r\n        return (\r\n            <MaterialTable\r\n                title=\"All Projects\"\r\n                columns={[\r\n                    // { title: 'Year', field: 'year', filterCellStyle:{maxWidth:50} },\r\n                    { title: 'Proposal Name', field: 'name' },\r\n                    { title: 'Client', field: 'client' },\r\n                    { title: 'Description', field: 'outlineOfProject', filtering: false },\r\n                    { title: 'Status', field: 'status', lookup: { new: 'New', inProgress: 'In Progress', completed: 'Completed'}, filterCellStyle:{paddingTop:0} },\r\n                    { title: 'Subject', field: 'subjectId', filterCellStyle:{maxWidth:50} },\r\n                    { title: 'Supervisor', field: 'supervisor' },\r\n                ]}\r\n                data={this._formatDataIntoTableList()}\r\n                options={{\r\n                    filtering: true,\r\n                }}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default (AllProjects);"]},"metadata":{},"sourceType":"module"}